{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shuo Chen's notes on Linux TCP/IP stack Source of this site: https://github.com/chenshuo/tcpip-study TCP/IP Reference TCP/IP Illustrated (vol. 1): The Protocols, 2nd ed. by Kevin R. Fall and W. Richard Stevens, 2011/11. RFC793 Transmission Control Protocol, 1981/09 RFC1122 Requirements for Internet Hosts --- Communication Layers, 1989/10 RFC5681 TCP Congestion Control, 2009/09 RFC6093 On the Implementation of the TCP Urgent Mechanism, 2011/01, which recommends against the use of urgent mechanism. RFC7323 TCP Extensions for High Performance RFC7413 TCP Fast Open RFC7414 TCP Roadmap RFC8312 CUBIC , Linux's default congestion control algorithm since 2.6.19, replaced BIC (default from 2.6.8 till 2.6.18.x) Many others TCP/IP Implementations BSD family 4.4BSD-Lite2, convered in TCP/IP Illustrated (vol. 2): The Implementation by Gary R. Wright and W. Richard Stevens, 1995. FreeBSD Linux First in 0.98? lwIP / uIP For microcontrollers, small footprint gvisor / netstack User space, in Golang Educational OSes Minix Xinu, covered in Internetworking With TCP/IP Volume II: Design, Implementation, and Internals, 3rd ed. by Douglas E. Comer and David L. Stevens, 1999. Tools packetdrill is a unittest for entire TCP/IP stack. neper is a performance testing tool to generate workloads. Recent changes Recent changes that I am aware of. EDT netdev 0x12 Keynote : Evolving from AFAP: Teaching NICs about time by Van Jacobson , slides and video . Linux 4.20 switched to Early Departure Time model in 2018/09, and refined in 2018/10. Historical notes In 2004, Vint Cerf and Bob Kahn received the Turing Award for their foundational work on TCP/IP.","title":"Home"},{"location":"#shuo-chens-notes-on-linux-tcpip-stack","text":"Source of this site: https://github.com/chenshuo/tcpip-study","title":"Shuo Chen's notes on Linux TCP/IP stack"},{"location":"#tcpip-reference","text":"TCP/IP Illustrated (vol. 1): The Protocols, 2nd ed. by Kevin R. Fall and W. Richard Stevens, 2011/11. RFC793 Transmission Control Protocol, 1981/09 RFC1122 Requirements for Internet Hosts --- Communication Layers, 1989/10 RFC5681 TCP Congestion Control, 2009/09 RFC6093 On the Implementation of the TCP Urgent Mechanism, 2011/01, which recommends against the use of urgent mechanism. RFC7323 TCP Extensions for High Performance RFC7413 TCP Fast Open RFC7414 TCP Roadmap RFC8312 CUBIC , Linux's default congestion control algorithm since 2.6.19, replaced BIC (default from 2.6.8 till 2.6.18.x) Many others","title":"TCP/IP Reference"},{"location":"#tcpip-implementations","text":"BSD family 4.4BSD-Lite2, convered in TCP/IP Illustrated (vol. 2): The Implementation by Gary R. Wright and W. Richard Stevens, 1995. FreeBSD Linux First in 0.98? lwIP / uIP For microcontrollers, small footprint gvisor / netstack User space, in Golang Educational OSes Minix Xinu, covered in Internetworking With TCP/IP Volume II: Design, Implementation, and Internals, 3rd ed. by Douglas E. Comer and David L. Stevens, 1999.","title":"TCP/IP Implementations"},{"location":"#tools","text":"packetdrill is a unittest for entire TCP/IP stack. neper is a performance testing tool to generate workloads.","title":"Tools"},{"location":"#recent-changes","text":"Recent changes that I am aware of. EDT netdev 0x12 Keynote : Evolving from AFAP: Teaching NICs about time by Van Jacobson , slides and video . Linux 4.20 switched to Early Departure Time model in 2018/09, and refined in 2018/10.","title":"Recent changes"},{"location":"#historical-notes","text":"In 2004, Vint Cerf and Bob Kahn received the Turing Award for their foundational work on TCP/IP.","title":"Historical notes"},{"location":"links/","text":"Links Literatures I have or haven't read. Socksdirect: datacenter sockets can be fast and compatible , SIGCOMM '19. Busypolling next generation by Eric Dumazet, 2017. Kernel Networking Walkthrough by Thomas Graf, LinuxCon 2015. Nice and short (~20 slides) intro to NAPI, RSS, RPS, GRO, TSO, FastOpen with pictures. TCP Implementation in Linux: A Brief Tutorial , 2008. Nice two-page overview of TCP/IP stack in Linux 2.6.19. Scaling in the Linux Networking Stack , kernel doc that describes RSS, RPS, RFS, XPS, etc. Programming with the Netpoll API by Jeff Moyer, Linux Kongress 2005.","title":"Links"},{"location":"links/#links","text":"Literatures I have or haven't read. Socksdirect: datacenter sockets can be fast and compatible , SIGCOMM '19. Busypolling next generation by Eric Dumazet, 2017. Kernel Networking Walkthrough by Thomas Graf, LinuxCon 2015. Nice and short (~20 slides) intro to NAPI, RSS, RPS, GRO, TSO, FastOpen with pictures. TCP Implementation in Linux: A Brief Tutorial , 2008. Nice two-page overview of TCP/IP stack in Linux 2.6.19. Scaling in the Linux Networking Stack , kernel doc that describes RSS, RPS, RFS, XPS, etc. Programming with the Netpoll API by Jeff Moyer, Linux Kongress 2005.","title":"Links"},{"location":"profile/","text":"Profiling Linux TCP/IP stack with perf and pprof At home, I have two Linux hosts with Mellanox 10GbE nic (bought used from Ebay in 2017), directly connected using SPF cable. Thoughput was about 1100MiB/s over 10GbE, both machine runs ~40% CPU utilization in one thread. For comparison, run openssl speed sha on the Rx side machine, an i7-3770 @ 3.4GHz. $ openssl speed sha OpenSSL 1.1.1f 31 Mar 2020 The 'numbers' are in 1000s of bytes per second processed. type 16 bytes 64 bytes 256 bytes 1024 bytes 8192 bytes 16384 bytes sha1 137355.08k 323943.17k 603290.54k 770941.95k 843352.75k 849619.63k sha256 75659.30k 167113.02k 289437.70k 354737.49k 379652.78k 381676.20k sha512 51745.33k 206941.63k 329443.07k 468301.82k 533897.22k 539525.12k In short, sending data through TCP is faster than calculating SHA1 locally. Tx path Profile taken on Debian bullseye (testing, pre-release 11) w/ kernel 5.6.14. Run the chargen program to keep sending data to a discard server. Rx path Profile taken on Ubuntu 18.04 w/ kernel 4.15 Run the discard program to keep reading the socket. Loopback w/ IPv6 Profile taken on Ubuntu 20.04 w/ kernel 5.4. Run both chargen and discard on the same i7-3770 host, throughput was about 3300MiB/s. chargen ran at 100% CPU, discard was about 74%.","title":"Profiling"},{"location":"profile/#profiling-linux-tcpip-stack-with-perf-and-pprof","text":"At home, I have two Linux hosts with Mellanox 10GbE nic (bought used from Ebay in 2017), directly connected using SPF cable. Thoughput was about 1100MiB/s over 10GbE, both machine runs ~40% CPU utilization in one thread. For comparison, run openssl speed sha on the Rx side machine, an i7-3770 @ 3.4GHz. $ openssl speed sha OpenSSL 1.1.1f 31 Mar 2020 The 'numbers' are in 1000s of bytes per second processed. type 16 bytes 64 bytes 256 bytes 1024 bytes 8192 bytes 16384 bytes sha1 137355.08k 323943.17k 603290.54k 770941.95k 843352.75k 849619.63k sha256 75659.30k 167113.02k 289437.70k 354737.49k 379652.78k 381676.20k sha512 51745.33k 206941.63k 329443.07k 468301.82k 533897.22k 539525.12k In short, sending data through TCP is faster than calculating SHA1 locally.","title":"Profiling Linux TCP/IP stack with perf and pprof"},{"location":"profile/#tx-path","text":"Profile taken on Debian bullseye (testing, pre-release 11) w/ kernel 5.6.14. Run the chargen program to keep sending data to a discard server.","title":"Tx path"},{"location":"profile/#rx-path","text":"Profile taken on Ubuntu 18.04 w/ kernel 4.15 Run the discard program to keep reading the socket.","title":"Rx path"},{"location":"profile/#loopback-w-ipv6","text":"Profile taken on Ubuntu 20.04 w/ kernel 5.4. Run both chargen and discard on the same i7-3770 host, throughput was about 3300MiB/s. chargen ran at 100% CPU, discard was about 74%.","title":"Loopback w/ IPv6"}]}